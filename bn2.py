import tkinter as tk
from tkinter import filedialog
import os, sys
import pandas as pd
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
import datetime
from xml.dom import minidom
from xml.etree import ElementTree

root = tk.Tk()


class Buildetwork(object):

    def __init__(self):
        self.my_filetypes = [('Excel File', 'xlsx'), ('Excel file', 'xlx')]
        self.sheet_bridge_domain = 'bridge_domain'



    def prettify(self,elem):
        """Return a pretty-printed XML string for the Element.
        """
        rough_string = ElementTree.tostring(elem, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ")

    def import_excelfile(self):
        self.filename = filedialog.askopenfile(parent=root, initialdir=os.getcwd(),
                                               title="Please select a file:")
        xlsx = pd.ExcelFile(self.filename.name)
        print(self.filename.name)
        #df = pd.read_excel(xlsx,sheet_name='end_point_group')
        #for index, row in df.iterrows():
        #    if row['description'] == 'POB CONTAINER MANAGEMENT - TEST':
        #        print(row['description'])
        return xlsx

    def create_bridge_domain(self):
        # Bridge SpreadSheet
        excel_file = Buildetwork().import_excelfile()
        bridge_domain_sheet = pd.read_excel(excel_file,sheet_name=self.sheet_bridge_domain)
        set_of_tenants = set()

        for index, row in bridge_domain_sheet.iterrows():
            if row['status'] == 'ignored':
                continue
            else:
                set_of_tenants.add(row['tenant'])

        print(set_of_tenants)


        for tenant in set_of_tenants:
            root = Element('polUni')
            # root.set('version', '1.0')
            root.append(Comment('Generated by JTools UCI Builder'))
            self.fvTenant = SubElement(root, 'fvTenant', {'name': tenant, 'status': 'modified'})
            for index, row in bridge_domain_sheet.iterrows():
                if row['tenant'] == tenant:
                    fvBD = SubElement(self.fvTenant, 'fvBD', {'arpFlood': 'yes','descr': row['description'],
                                                              'ipLearning':'yes', 'limitIpLearnToSubnets':'yes',
                                                              'mcastAllow':'no','multiDstPktAct':'bd-flood',
                                                              'name':row['name'], 'status':'', 'type':'regular',
                                                              'unicastRoute':'yes', 'unkMacUcastAct':'flood',
                                                              'unkMcastAct':'flood'})
                    fvRsBDToNdP = SubElement(fvBD,'fvRsBDToNdP',{'tnNdIfPolName':''})
                    fvRsCtx = SubElement(fvBD,'fvRsCtx', {'tnFvCtxName':row['vrf']})
                    fvRsIgmpsn = SubElement(fvBD,'fvRsIgmpsn',{'tnIgmpSnoopPolName':''})






            print(Buildetwork().prettify(root))




Buildetwork().create_bridge_domain()